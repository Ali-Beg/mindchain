{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MindChain Agentic Framework","text":"<p>Welcome to the MindChain documentation!</p>"},{"location":"#overview","title":"Overview","text":"<p>MindChain is a comprehensive framework for building, deploying, and managing AI agents with a unique Master Control Program (MCP) supervision layer. The architecture enables both simple single-agent workflows and complex multi-agent systems with advanced coordination capabilities.</p>"},{"location":"#current-implementation-status","title":"Current Implementation Status","text":"<p>MindChain is currently in its initial development phase with the following components implemented:</p>"},{"location":"#master-control-program-mcp","title":"Master Control Program (MCP)","text":"<p>The MCP serves as the supervisory layer of the system:</p> <ul> <li>Agent Management: Registration and unregistration of agents</li> <li>Policy Enforcement: Basic policies to control agent behavior</li> <li>Resource Management: Tracking and limiting resource usage</li> <li>Execution Supervision: Safe execution of agent tasks</li> <li>Metrics Tracking: Performance and usage statistics</li> <li>Recovery System: Basic error handling and agent reset capabilities</li> </ul>"},{"location":"#agent-system","title":"Agent System","text":"<ul> <li>Agent Configuration: Customizable agent parameters</li> <li>Status Management: Full agent lifecycle (initialization, idle, active, error states)</li> <li>Basic Response Generation: Simulated responses (LLM integration coming soon)</li> <li>Tool Execution Interface: Framework for adding tools to agents</li> </ul>"},{"location":"#memory-system","title":"Memory System","text":"<ul> <li>Short-Term Memory: Basic storage of recent interactions</li> <li>Context Retrieval: Simple retrieval of relevant previous information</li> <li>Memory Management: Operations to clear and maintain memory</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>MindChain is not yet published to PyPI. To use it:</p> <ol> <li>Clone the repository</li> <li>Install dependencies</li> <li>Import from the src directory</li> </ol>"},{"location":"#basic-example","title":"Basic Example","text":"<pre><code>import asyncio\nfrom src.mindchain import MCP, Agent, AgentConfig\n\nasync def main():\n    # Initialize the MCP\n    mcp = MCP(config={\n        'log_level': 'INFO',\n        'policies': {\n            'allow_external_tools': True,\n        }\n    })\n\n    # Create agent configuration\n    config = AgentConfig(\n        name=\"AssistantAgent\",\n        description=\"General purpose assistant agent\",\n        system_prompt=\"You are a helpful AI assistant.\"\n    )\n\n    # Create and register an agent\n    agent = Agent(config)\n    agent_id = mcp.register_agent(agent)\n\n    # Run the agent with MCP supervision\n    response = await mcp.supervise_execution(\n        agent_id=agent_id,\n        task=lambda: agent.run(\"Hello! Can you introduce yourself?\")\n    )\n    print(response)\n\n    # Clean up\n    mcp.unregister_agent(agent_id)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"#demo-script","title":"Demo Script","text":"<p>You can run the included demo script to see the framework in action:</p> <pre><code>python demo.py\n</code></pre> <p>This will demonstrate: 1. A single agent answering questions 2. A multi-agent workflow with specialized agents working together</p>"},{"location":"#testing","title":"Testing","text":"<p>To verify the framework is working correctly:</p> <pre><code>python run_test.py\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<p>The following features are planned for upcoming development:</p> <ol> <li>LLM Integration: Connect to real language models</li> <li>Vector Database: Enhanced memory with embeddings</li> <li>Tool Implementations: Useful tools for agents</li> <li>Web Interface: Visual monitoring and interaction</li> <li>Advanced Orchestration: Sophisticated multi-agent coordination</li> </ol>"},{"location":"#project-structure","title":"Project Structure","text":"<p>See the Repository Structure documentation for details on how the project is organized. \"\" </p>"},{"location":"architecture/repository_structure/","title":"MindChain Repository Structure","text":"<p>This document provides an architectural overview of the current MindChain repository structure.</p>"},{"location":"architecture/repository_structure/#directory-structure","title":"Directory Structure","text":"<pre><code>mindchain/\n\u251c\u2500\u2500 docs/                              # Documentation\n\u2502   \u251c\u2500\u2500 architecture/                  # Architecture documentation\n\u2502   \u2502   \u2514\u2500\u2500 repository_structure.md    # This file\n\u2502   \u251c\u2500\u2500 index.md                       # Main documentation page\n\u2502   \u2514\u2500\u2500 mkdocs.yml                     # MkDocs configuration\n\u2502\n\u251c\u2500\u2500 examples/                          # Example code\n\u2502   \u251c\u2500\u2500 basic_agent/                   # Basic agent examples\n\u2502   \u2502   \u2514\u2500\u2500 simple_agent.py            # Simple agent example\n\u2502   \u2514\u2500\u2500 multi_agent/                   # Multi-agent examples\n\u2502       \u2514\u2500\u2500 team_collaboration.py      # Team collaboration example\n\u2502\n\u251c\u2500\u2500 src/                               # Source code\n\u2502   \u251c\u2500\u2500 core/                          # Legacy core module (being migrated)\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py                # Core package initialization\n\u2502   \u2502   \u251c\u2500\u2500 errors.py                  # Error definitions\n\u2502   \u2502   \u2514\u2500\u2500 mcp.py                     # Original MCP implementation\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 mindchain/                     # Main package\n\u2502       \u251c\u2500\u2500 __init__.py                # Package initialization\n\u2502       \u251c\u2500\u2500 cli.py                     # Command line interface\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 core/                      # Core components\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py            # Core package initialization\n\u2502       \u2502   \u251c\u2500\u2500 agent.py               # Agent implementation\n\u2502       \u2502   \u2514\u2500\u2500 errors.py              # Error definitions\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 mcp/                       # Master Control Program\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py            # MCP package initialization  \n\u2502       \u2502   \u251c\u2500\u2500 mcp.py                 # MCP implementation\n\u2502       \u2502   \u251c\u2500\u2500 policies.py            # Policy management\n\u2502       \u2502   \u251c\u2500\u2500 resource_manager.py    # Resource management\n\u2502       \u2502   \u2514\u2500\u2500 metrics.py             # Agent metrics tracking\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 memory/                    # Memory systems\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py            # Memory package initialization\n\u2502       \u2502   \u2514\u2500\u2500 memory_manager.py      # Basic memory manager\n\u2502       \u2502\n\u2502       \u2514\u2500\u2500 tools/                     # Tool implementations (placeholder)\n\u2502           \u2514\u2500\u2500 __init__.py            # Tools package initialization\n\u2502\n\u251c\u2500\u2500 tests/                             # Tests\n\u2502   \u251c\u2500\u2500 unit/                          # Unit tests\n\u2502   \u2502   \u251c\u2500\u2500 test_mcp.py                # MCP tests\n\u2502   \u2502   \u2514\u2500\u2500 test_agent_basic.py        # Basic agent tests\n\u2502   \u2514\u2500\u2500 conftest.py                    # Test configurations and fixtures\n\u2502\n\u251c\u2500\u2500 demo.py                            # Demonstration script\n\u251c\u2500\u2500 run_test.py                        # Test runner script\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md                 # Code of conduct\n\u251c\u2500\u2500 CONTRIBUTING.md                    # Contributing guidelines\n\u251c\u2500\u2500 LICENSE                            # Project license\n\u251c\u2500\u2500 README.md                          # Project overview\n\u251c\u2500\u2500 ROADMAP.md                         # Project roadmap\n\u251c\u2500\u2500 SECURITY.md                        # Security policy\n\u2514\u2500\u2500 pyproject.toml                     # Project configuration\n</code></pre>"},{"location":"architecture/repository_structure/#component-architecture","title":"Component Architecture","text":"<p>The current implementation includes the following key components:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                 \u2502\n\u2502                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                     \u2502\n\u2502                 \u2502                         \u2502                     \u2502\n\u2502                 \u2502     Master Control      \u2502                     \u2502\n\u2502                 \u2502     Program (MCP)       \u2502                     \u2502\n\u2502                 \u2502                         \u2502                     \u2502\n\u2502                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n\u2502                             \u2502                                   \u2502\n\u2502                             \u2502 manages                           \u2502\n\u2502                             \u25bc                                   \u2502\n\u2502     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502     \u2502           \u2502     \u2502           \u2502     \u2502           \u2502          \u2502\n\u2502     \u2502  Agent 1  \u2502     \u2502  Agent 2  \u2502     \u2502  Agent 3  \u2502          \u2502\n\u2502     \u2502           \u2502     \u2502           \u2502     \u2502           \u2502          \u2502\n\u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518          \u2502\n\u2502           \u2502                 \u2502                 \u2502                 \u2502\n\u2502           \u2502                 \u2502                 \u2502                 \u2502\n\u2502     \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510                                              \u2502\n\u2502     \u2502           \u2502                                              \u2502\n\u2502     \u2502  Memory   \u2502                                              \u2502\n\u2502     \u2502           \u2502                                              \u2502\n\u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                              \u2502\n\u2502                                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/repository_structure/#key-components","title":"Key Components","text":""},{"location":"architecture/repository_structure/#master-control-program-mcp","title":"Master Control Program (MCP)","text":"<p>The MCP serves as the central supervisory system with these implemented capabilities:</p> <ul> <li>Agent lifecycle management (registration, unregistration)</li> <li>Policy enforcement through the PolicyManager</li> <li>Resource allocation and monitoring via ResourceManager</li> <li>Metrics tracking for agent performance</li> <li>Supervised execution of agent tasks</li> </ul>"},{"location":"architecture/repository_structure/#agents","title":"Agents","text":"<p>Agents have been implemented with these features: - Configuration via AgentConfig - Status management (INITIALIZING, IDLE, ACTIVE, etc.) - Basic response generation (placeholder for LLM integration) - Simple memory interaction - Tool execution interface (framework for future tool implementations)</p>"},{"location":"architecture/repository_structure/#memory-system","title":"Memory System","text":"<p>The current memory implementation includes: - Simple memory manager with short-term storage - Basic memory retrieval for context - Memory clearing operations</p>"},{"location":"architecture/repository_structure/#policies","title":"Policies","text":"<p>The policy system currently implements: - Safety controls for agent behavior - Token limit enforcement - Tool permission management</p>"},{"location":"architecture/repository_structure/#resource-management","title":"Resource Management","text":"<p>Resource management features include: - Token usage tracking - Agent allocation limits - Task execution controls - API rate limiting</p>"},{"location":"architecture/repository_structure/#current-implementation-status","title":"Current Implementation Status","text":"<p>The current implementation provides:</p> <ol> <li>A working framework for agent supervision via MCP</li> <li>Basic agent functionality with simulated responses</li> <li>Simple memory management</li> <li>Policy enforcement mechanisms</li> <li>Resource tracking and limits</li> </ol> <p>This represents the initial implementation phase, focusing on the architectural foundation and core supervision capabilities. The next development phases will expand functionality with:</p> <ol> <li>Real LLM integration</li> <li>Advanced memory with vector storage</li> <li>Tool implementations</li> <li>Planning and orchestration systems</li> </ol>"},{"location":"architecture/repository_structure/#demo-and-testing","title":"Demo and Testing","text":"<p>The current implementation includes: - A demonstration script (demo.py) showing both single-agent and multi-agent capabilities - Basic tests verifying core functionality - A test helper script (run_test.py) to validate the implementation</p>"},{"location":"contributing/deployment/","title":"Deployment Guide","text":"<p>This document describes how to deploy MindChain to PyPI and manage releases.</p>"},{"location":"contributing/deployment/#prerequisites","title":"Prerequisites","text":"<ol> <li>You must have Poetry installed (<code>pip install poetry</code>)</li> <li>You must have permissions to publish to PyPI under the \"mindchain\" package name</li> <li>You must have a PyPI API token</li> </ol>"},{"location":"contributing/deployment/#manual-deployment","title":"Manual Deployment","text":""},{"location":"contributing/deployment/#step-1-set-up-your-pypi-token","title":"Step 1: Set up your PyPI token","text":"<p>Create a PyPI token at https://pypi.org/manage/account/token/ and add it to your environment:</p> <pre><code># Add to your .env file\nPYPI_API_TOKEN=your_token_here\n\n# Or set temporarily in your shell\nexport PYPI_API_TOKEN=your_token_here\n</code></pre>"},{"location":"contributing/deployment/#step-2-configure-poetry-with-your-pypi-token","title":"Step 2: Configure Poetry with your PyPI token","text":"<pre><code>poetry config pypi-token.pypi $PYPI_API_TOKEN\n</code></pre>"},{"location":"contributing/deployment/#step-3-increment-the-version","title":"Step 3: Increment the version","text":"<p>Edit the version in <code>pyproject.toml</code>:</p> <pre><code>[tool.poetry]\nname = \"mindchain\"\nversion = \"0.1.1\"  # Update this version\n</code></pre> <p>Or use Poetry's version command:</p> <pre><code>poetry version patch  # Increments the patch version (0.1.0 -&gt; 0.1.1)\npoetry version minor  # Increments the minor version (0.1.0 -&gt; 0.2.0)\npoetry version major  # Increments the major version (0.1.0 -&gt; 1.0.0)\n</code></pre>"},{"location":"contributing/deployment/#step-4-build-the-package","title":"Step 4: Build the package","text":"<pre><code>poetry build\n</code></pre> <p>This will create distribution files in the <code>dist/</code> directory.</p>"},{"location":"contributing/deployment/#step-5-publish-to-pypi","title":"Step 5: Publish to PyPI","text":"<pre><code>poetry publish\n</code></pre> <p>Or build and publish in one command:</p> <pre><code>poetry publish --build\n</code></pre>"},{"location":"contributing/deployment/#automated-deployment-with-github-actions","title":"Automated Deployment with GitHub Actions","text":"<p>The deployment process is automated using GitHub Actions in the <code>.github/workflows/publish.yml</code> workflow.</p>"},{"location":"contributing/deployment/#how-to-trigger-an-automated-release","title":"How to trigger an automated release:","text":"<ol> <li>Create a new GitHub release through the GitHub UI</li> <li>Tag it with the same version number as in <code>pyproject.toml</code></li> <li>The publish workflow will automatically trigger and deploy to PyPI</li> </ol>"},{"location":"contributing/deployment/#setting-up-github-secrets","title":"Setting up GitHub Secrets","text":"<p>Make sure to set up the <code>PYPI_API_TOKEN</code> secret in your GitHub repository:</p> <ol> <li>Go to your GitHub repository</li> <li>Click on \"Settings\" &gt; \"Secrets and variables\" &gt; \"Actions\"</li> <li>Click \"New repository secret\"</li> <li>Name: <code>PYPI_API_TOKEN</code></li> <li>Value: Your PyPI API token</li> </ol>"},{"location":"contributing/deployment/#release-process-best-practices","title":"Release Process Best Practices","text":"<ol> <li>Update the CHANGELOG.md with details of changes</li> <li>Update version number in pyproject.toml</li> <li>Create and merge a PR with these changes</li> <li>Create a GitHub release and tag it with the version number </li> <li>Write detailed release notes in the GitHub release</li> <li>The CI will handle testing, building, and publishing to PyPI</li> </ol>"}]}